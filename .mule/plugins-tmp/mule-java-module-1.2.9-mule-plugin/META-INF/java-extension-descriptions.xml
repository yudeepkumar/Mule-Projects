<?xml version="1.0" encoding="UTF-8"?>
<extension-documentation>
    <configs>
        <config name="config">
            <description><![CDATA[Default configuration]]></description>
            <parameters/>
        </config>
    </configs>
    <connections/>
    <extension name="Java">
        <description><![CDATA[JavaModule MuleSoft Extension, used to invoke Java code.]]></description>
        <parameters/>
    </extension>
    <operations>
        <operation name="invoke">
            <description><![CDATA[Operation that allows the user to invoke methods with the provided args on the given instance. The identifier of the Method to be invoked includes the class and method names, being the method a full description of its signature including the types of each parameter. <p> For example, if we want to invoke the method echo with signature public String echo(String msg) which belongs to Class org.bar.Foo, then the identifier of the method will be "echo(String)"]]></description>
            <parameters>
                <parameter name="instance">
                    <description><![CDATA[the instance on which the method will be invoked]]></description>
                </parameter>
                <parameter name="args">
                    <description><![CDATA[the arguments used to invoke the given Method. This parameter must be a map with the names of the method arguments as keys, and each of the argument values as values. For example, given a method echo with signature public String echo(String msg, String volume) a possible value for args is: #[{ msg : 'This is a message to echo', volume : 'Loud' }] In order to use those argument names the java class must be compiled with -parameters, in other case you have to use the canonical names for the arguments: #[{ arg0 : 'This is a message to echo', arg1 : 'Loud' }] You can always use the canonical name for the arguments, even if the source code was compiled with -parameters.]]></description>
                </parameter>
                <parameter name="outputMimeType">
                    <description><![CDATA[The mime type of the payload that this invocation will output]]></description>
                </parameter>
                <parameter name="outputEncoding">
                    <description><![CDATA[The encoding of the payload that this invocation will output]]></description>
                </parameter>
                <parameter name="class">
                    <description><![CDATA[Represents the fully qualified name of the Class containing the referenced Method.]]></description>
                </parameter>
                <parameter name="method">
                    <description><![CDATA[Represents the Method signature containing the method name and it's argument types. <p> For example, for the method with signature public String log(String msg, boolean verbose) then the identifier of the method will be "log(String, boolean)"]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="invokeStatic">
            <description><![CDATA[Operation that allows the user to invoke static methods with the provided arguments. The identifier of the Method to be invoked includes the class and method names, being the method a full description of its signature including the types of each parameter. <p> For example, if we want to invoke the static method echo with signature public static String echo(String msg) which belongs to Class org.bar.Foo, then the identifier of the method will be "echo(String)"]]></description>
            <parameters>
                <parameter name="args">
                    <description><![CDATA[the arguments used to invoke the given Method. This parameter must be a map with the names of the method arguments as keys, and each of the argument values as values. For example, given a method echo with signature public String echo(String msg, String volume) a possible value for args is: #[{ msg : 'This is a message to echo', volume : 'Loud' }] In order to use those argument names the java class must be compiled with -parameters, in other case you have to use the canonical names for the arguments: #[{ arg0 : 'This is a message to echo', arg1 : 'Loud' }] You can always use the canonical name for the arguments, even if the source code was compiled with -parameters.]]></description>
                </parameter>
                <parameter name="outputMimeType">
                    <description><![CDATA[The mime type of the payload that this invocation will output]]></description>
                </parameter>
                <parameter name="outputEncoding">
                    <description><![CDATA[The encoding of the payload that this invocation will output]]></description>
                </parameter>
                <parameter name="class">
                    <description><![CDATA[Represents the fully qualified name of the Class containing the referenced Method.]]></description>
                </parameter>
                <parameter name="method">
                    <description><![CDATA[Represents the Method signature containing the method name and it's argument types. <p> For example, for the method with signature public static String log(String msg, boolean verbose) then the identifier of the method will be "log(String, boolean)"]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="new">
            <description><![CDATA[Operation that allows the user to create a new instance of the given class The identifier of the Constructor to be used includes the class and constructor names, being the constructor a full description of its signature including the types of each parameter. <p> For example, if we want to invoke the constructor Foo(String name, int age) which belongs to Class org.bar.Foo, then the identifier of the method will be "Foo(String,int)"]]></description>
            <parameters>
                <parameter name="args">
                    <description><![CDATA[the arguments used to invoke the given Constructor]]></description>
                </parameter>
                <parameter name="class">
                    <description><![CDATA[Represents the fully qualified name of the Class containing the referenced Method.]]></description>
                </parameter>
                <parameter name="constructor">
                    <description><![CDATA[Represents the Constructor signature containing the name and it's argument types. <p> For example, for the Constructor with signature public Foo(String name, Integer age) then the identifier of the method will be "Foo(String, Integer)"]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="validateType">
            <description><![CDATA[Operation that allows the user to validate that a given instance is an instanceof the specified class.]]></description>
            <parameters>
                <parameter name="class">
                    <description><![CDATA[]]></description>
                </parameter>
                <parameter name="instance">
                    <description><![CDATA[the object whose type is expected to be an instanceof of the given class]]></description>
                </parameter>
                <parameter name="acceptSubtypes">
                    <description><![CDATA[whether or not to accept sub types of the given class or if the instance has to be of the exact same class]]></description>
                </parameter>
            </parameters>
        </operation>
    </operations>
    <sources/>
    <types/>
</extension-documentation>
